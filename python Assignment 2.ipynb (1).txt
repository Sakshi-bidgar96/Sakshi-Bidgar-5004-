{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "d96b4d32",
   "metadata": {},
   "source": [
    "# Practicle Assignment 2"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2e79bcb",
   "metadata": {},
   "source": [
    "### 1. Store and display student information (name, age, grade)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "4338f1b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Name: Aarav, Age: 16, Grade: 10th\n"
     ]
    }
   ],
   "source": [
    "def displayStudentInfo(studentInfo):\n",
    "    print(f\"Name: {studentInfo[0]}, Age: {studentInfo[1]}, Grade: {studentInfo[2]}\")\n",
    "\n",
    "studentInfo = (\"Aarav\", 16, \"10th\")\n",
    "displayStudentInfo(studentInfo)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a9365621",
   "metadata": {},
   "source": [
    "### 2. List prices of grocery items and total them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9137ba74",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Item Prices: (20, 45, 30, 25)\n",
      "Total: 120\n"
     ]
    }
   ],
   "source": [
    "def calculateTotalPrices(prices):\n",
    "    print(\"Item Prices:\", prices)\n",
    "    print(\"Total:\", sum(prices))\n",
    "\n",
    "groceryPrices = (20, 45, 30, 25)\n",
    "calculateTotalPrices(groceryPrices)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8335ad1e",
   "metadata": {},
   "source": [
    "### 3) Pair items with prices using tuples.\n",
    "(&quot;Milk&quot;, 25), (&quot;Eggs&quot;, 50), (&quot;Bread&quot;, 20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6febe55f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Milk - ₹25\n",
      "Eggs - ₹50\n",
      "Bread - ₹20\n"
     ]
    }
   ],
   "source": [
    "def displayItemPrices(itemPricePairs):\n",
    "    for item in itemPricePairs:\n",
    "        print(f\"{item[0]} - ₹{item[1]}\")\n",
    "\n",
    "groceryItems = ((\"Milk\", 25), (\"Eggs\", 50), (\"Bread\", 20))\n",
    "displayItemPrices(groceryItems)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "818f421a",
   "metadata": {},
   "source": [
    "### 4. Store and display train schedule as tuples.\n",
    "(&quot;Rajdhani&quot;, &quot;10:00&quot;), (&quot;Shatabdi&quot;, &quot;12:30&quot;), (&quot;Duronto&quot;, &quot;17:00&quot;)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "522faaad",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Rajdhani at 10:00\n",
      "Shatabdi at 12:30\n",
      "Duronto at 17:00\n"
     ]
    }
   ],
   "source": [
    "def displayTrainSchedule(trainSchedule):\n",
    "    for train in trainSchedule:\n",
    "        print(f\"{train[0]} at {train[1]}\")\n",
    "\n",
    "trainSchedule = ((\"Rajdhani\", \"10:00\"), (\"Shatabdi\", \"12:30\"), (\"Duronto\", \"17:00\"))\n",
    "displayTrainSchedule(trainSchedule)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fff28503",
   "metadata": {},
   "source": [
    "### 5) Sort employee records by salary.\n",
    "(&quot;John&quot;, 40000), (&quot;Alice&quot;, 55000), (&quot;Raj&quot;, 30000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "05994022",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Raj - ₹30000\n",
      "John - ₹40000\n",
      "Alice - ₹55000\n"
     ]
    }
   ],
   "source": [
    "def sortEmployeesBySalary(employeeRecords):\n",
    "    sortedEmployees = sorted(employeeRecords, key=lambda x: x[1])\n",
    "    for employee in sortedEmployees:\n",
    "        print(f\"{employee[0]} - ₹{employee[1]}\")\n",
    "\n",
    "employeeRecords = ((\"John\", 40000), (\"Alice\", 55000), (\"Raj\", 30000))\n",
    "sortEmployeesBySalary(employeeRecords)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab0d447b",
   "metadata": {},
   "source": [
    "### 6) Count how many students scored above 75 marks.\n",
    "marks = (67, 88, 92, 74, 76, 55)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6ab9a4dd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Students scoring above 75: 3\n"
     ]
    }
   ],
   "source": [
    "def countScoresAbove75(marks):\n",
    "    count = sum(1 for mark in marks if mark > 75)\n",
    "    print(f\"Students scoring above 75: {count}\")\n",
    "\n",
    "marks = (67, 88, 92, 74, 76, 55)\n",
    "countScoresAbove75(marks)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f83fd22e",
   "metadata": {},
   "source": [
    "### 7) Create a tuple of stock prices and find the max.\n",
    "Prices = (154.5, 160.2, 149.8, 170.1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c1c780b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Highest stock price: 170.1\n"
     ]
    }
   ],
   "source": [
    "def getMaxStockPrice(prices):\n",
    "    print(\"Highest stock price:\", max(prices))\n",
    "\n",
    "stockPrices = (154.5, 160.2, 149.8, 170.1)\n",
    "getMaxStockPrice(stockPrices)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7e558901",
   "metadata": {},
   "source": [
    "### 8) Log temperature readings during the day. Find the average temperature\n",
    "temperatures = (29.5, 30.0, 32.2, 31.5, 28.9)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d2c27e57",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average temperature: 30.42°C\n"
     ]
    }
   ],
   "source": [
    "def calculateAverageTemperature(temperatures):\n",
    "    average = sum(temperatures) / len(temperatures)\n",
    "    print(f\"Average temperature: {average:.2f}°C\")\n",
    "\n",
    "temperatures = (29.5, 30.0, 32.2, 31.5, 28.9)\n",
    "calculateAverageTemperature(temperatures)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dea2be7c",
   "metadata": {},
   "source": [
    "### 9) Schedule appointments (name, time).\n",
    "appointments = (&quot;Doctor&quot;, &quot;10:00 AM&quot;), (&quot;Meeting&quot;, &quot;2:00 PM&quot;)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "eb90d5e9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Doctor at 10:00 AM\n",
      "Meeting at 2:00 PM\n"
     ]
    }
   ],
   "source": [
    "def displayAppointments(appointments):\n",
    "    for appointment in appointments:\n",
    "        print(f\"{appointment[0]} at {appointment[1]}\")\n",
    "\n",
    "appointments = ((\"Doctor\", \"10:00 AM\"), (\"Meeting\", \"2:00 PM\"))\n",
    "displayAppointments(appointments)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3e0fa4e",
   "metadata": {},
   "source": [
    "### 10) Store contact info (name, phone number).\n",
    "contacts = (&quot;Anil&quot;, &quot;9876543210&quot;), (&quot;Priya&quot;, &quot;9123456780&quot;)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "bc319a89",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Anil: 9876543210\n",
      "Priya: 9123456780\n"
     ]
    }
   ],
   "source": [
    "def displayContacts(contactList):\n",
    "    for contact in contactList:\n",
    "        print(f\"{contact[0]}: {contact[1]}\")\n",
    "\n",
    "contactList = ((\"Anil\", \"9876543210\"), (\"Priya\", \"9123456780\"))\n",
    "displayContacts(contactList)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "93a44609",
   "metadata": {},
   "source": [
    "### 11) Display exam schedule with subject and time.\n",
    "exams = (&quot;Math&quot;, &quot;9:00 AM&quot;), (&quot;Science&quot;, &quot;11:30 AM&quot;), (&quot;English&quot;, &quot;2:00 PM&quot;)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "7936ed23",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Math at 9:00 AM\n",
      "Science at 11:30 AM\n",
      "English at 2:00 PM\n"
     ]
    }
   ],
   "source": [
    "def displayExamSchedule(examSchedule):\n",
    "    for exam in examSchedule:\n",
    "        print(f\"{exam[0]} at {exam[1]}\")\n",
    "\n",
    "examSchedule = ((\"Math\", \"9:00 AM\"), (\"Science\", \"11:30 AM\"), (\"English\", \"2:00 PM\"))\n",
    "displayExamSchedule(examSchedule)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
